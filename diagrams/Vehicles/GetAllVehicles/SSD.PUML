@startuml

title Get and Create Vehicle Use Case Sequence Diagram

actor Client as "Client"

participant Dashboard as "<<View>> Dashboard"

participant VehicleManagementView as "<<View>> VehicleManagementView"

participant VehicleController as "<<Controller>> VehicleController"

participant VehicleService as "<<Service>> VehicleService"

participant vehicleResponseModels as "vehicleResponseModels: List<VehicleResponseModel>"

participant VehicleRepository as "<<Repository>> VehicleRepository"

participant vehicles as "vehicles: List<Vehicle>"

participant Database as "<<Database>> Database"

participant VehicleResponseMapper as "<<Mapper>> VehicleResponseMapper"

participant NewVehicle as "newVehicle: Vehicle"

' Get All Vehicles by Customer ID
Client -> Dashboard: viewVehicles(customerId)
activate Dashboard
Dashboard -> VehicleManagementView: render()
activate VehicleManagementView
VehicleManagementView -> VehicleController: GET /customers/{customerId}/vehicles HTTP/1.1
activate VehicleController
VehicleController -> VehicleService: getAllVehiclesForCustomer(customerId)
activate VehicleService
VehicleService -> VehicleRepository: findAllByCustomerId(customerId)
activate VehicleRepository
VehicleRepository -> Database: SELECT * FROM vehicles WHERE customerId = {customerId}
activate Database
Database --> VehicleRepository: vehicles
deactivate Database
VehicleRepository --> VehicleService: vehicles
deactivate VehicleRepository
VehicleService -> VehicleResponseMapper: entityToResponseModelList(vehicles)
activate VehicleResponseMapper
VehicleResponseMapper --> VehicleService: vehicleResponseModels
deactivate VehicleResponseMapper
VehicleService --> VehicleController : vehicleResponseModels
deactivate VehicleService
VehicleController --> VehicleManagementView : vehicleResponseModels
deactivate VehicleController

' Create New Vehicle
Client -> VehicleManagementView: createVehicle(newVehicleDto)
activate VehicleManagementView
VehicleManagementView -> VehicleController: POST /vehicles HTTP/1.1
activate VehicleController
VehicleController -> VehicleService: createVehicle(newVehicleDto)
activate VehicleService
VehicleService -> VehicleRepository: save(newVehicle)
activate VehicleRepository
VehicleRepository -> Database: INSERT INTO vehicles ...
activate Database
Database --> VehicleRepository: newVehicle
deactivate Database
VehicleRepository --> VehicleService: newVehicle
deactivate VehicleRepository
VehicleService -> VehicleResponseMapper: entityToResponseModel(newVehicle)
activate VehicleResponseMapper
VehicleResponseMapper --> VehicleService: vehicleResponseModel
deactivate VehicleResponseMapper
VehicleService --> VehicleController : vehicleResponseModel
deactivate VehicleService
VehicleController --> VehicleManagementView : vehicleResponseModel
deactivate VehicleController

' Return back to dashboard
Client -> VehicleManagementView: Back()
VehicleManagementView --> Dashboard: render()
deactivate VehicleManagementView
deactivate Dashboard

@enduml
